#!/usr/bin/env bash
set -uo pipefail;

####################################
# Ensure we can execute standalone #
####################################

function early_death() {
  echo "[FATAL] ${0}: ${1}" >&2;
  exit 1;
};

if [ -z "${TGENV_ROOT:-""}" ]; then
  # http://stackoverflow.com/questions/1055671/how-can-i-get-the-behavior-of-gnus-readlink-f-on-a-mac
  readlink_f() {
    local target_file="${1}";
    local file_name;

    while [ "${target_file}" != "" ]; do
      cd "$(dirname ${target_file})" || early_death "Failed to 'cd \$(dirname ${target_file})' while trying to determine TGENV_ROOT";
      file_name="$(basename "${target_file}")" || early_death "Failed to 'basename \"${target_file}\"' while trying to determine TGENV_ROOT";
      target_file="$(readlink "${file_name}")";
    done;

    echo "$(pwd -P)/${file_name}";
  };

  TGENV_ROOT="$(cd "$(dirname "$(readlink_f "${0}")")/.." && pwd)";
  [ -n "${TGENV_ROOT}" ] || early_death "Failed to 'cd \"\$(dirname \"\$(readlink_f \"${0}\")\")/..\" && pwd' while trying to determine TGENV_ROOT";
else
  TGENV_ROOT="${TGENV_ROOT%/}";
fi;
export TGENV_ROOT;

if [ -n "${TGENV_HELPERS:-""}" ]; then
  log 'debug' 'TGENV_HELPERS is set, not sourcing helpers again';
else
  [ "${TGENV_DEBUG:-0}" -gt 0 ] && echo "[DEBUG] Sourcing helpers from ${TGENV_ROOT}/lib/helpers.sh";
  if source "${TGENV_ROOT}/lib/helpers.sh"; then
    log 'debug' 'Helpers sourced successfully';
  else
    early_death "Failed to source helpers from ${TGENV_ROOT}/lib/helpers.sh";
  fi;
fi;

# Ensure libexec and bin are in $PATH
for dir in libexec bin; do
  case ":${PATH}:" in
    *:${TGENV_ROOT}/${dir}:*) log 'debug' "\$PATH already contains '${TGENV_ROOT}/${dir}', not adding it again";;
    *)
      log 'debug' "\$PATH does not contain '${TGENV_ROOT}/${dir}', prepending and exporting it now";
      export PATH="${TGENV_ROOT}/${dir}:${PATH}";
      ;;
  esac;
done;

#####################
# Begin Script Body #
#####################

[ "${#}" -gt 1 ] && log 'error' 'usage: tgenv install [<version>]';

declare requested="${1:-""}";

log debug "Resolving version with: tgenv-resolve-version ${requested}";
declare resolved="$(tgenv-resolve-version ${requested})";

declare version="${resolved%%\:*}";
declare regex="${resolved##*\:}";

[ -n "${version}" ] || log 'error' 'Version is not specified. This should not be possible as we default to latest';

log 'debug' "Processing install for version ${version}, using regex ${regex}";

version="$(tgenv-list-remote | grep -e "${regex}" | head -n 1)";
[ -n "${version}" ] || log 'error' "No versions matching '${requested}' found in remote";

dst_path="${TGENV_ROOT}/versions/${version}";
if [ -f "${dst_path}/terragrunt" ]; then
  echo "Terragrunt v${version} is already installed";
  exit 0;
fi;

TGENV_ARCH="${TGENV_ARCH:-amd64}";
case "$(uname -s)" in
  Darwin*)
    os="darwin_${TGENV_ARCH}";
    ;;
  MINGW64*)
    os="windows_${TGENV_ARCH}";
    ;;
  MSYS_NT*)
    os="windows_${TGENV_ARCH}";
    ;;
  CYGWIN_NT*)
    os="windows_${TGENV_ARCH}";
    ;;
  FreeBSD*)
    os="freebsd_${TGENV_ARCH}"
    ;;
  *)
    os="linux_${TGENV_ARCH}";
    ;;
esac;

keybase_bin="$(command -v keybase 2>/dev/null)";
shasum_bin="$(command -v shasum 2>/dev/null)";
sha256sum_bin="$(command -v sha256sum 2>/dev/null)";

TGENV_REMOTE="${TGENV_REMOTE:-https://github.com/gruntwork-io}";
version_url="${TGENV_REMOTE}/terragrunt/releases/download/v${version}";

tarball_name="terragrunt_${os}";

# shasums_name="terragrunt_${version}_SHA256SUMS";

log 'info' "Installing Terragrunt v${version}";

# # Create a local temporary directory for downloads
# download_tmp="$(mktemp -d tgenv_download.XXXXXX)" || log 'error' "Unable to create temporary download directory in $(pwd)";
# # Clean it up in case of error
# trap "rm -rf ${download_tmp}" EXIT;

declare curl_progress="";
case "${TGENV_CURL_OUTPUT:-2}" in
  '2')
    log 'debug' 'Setting curl progress bar with "-#"';
    curl_progress="-#";
    ;;
  '1')
    log 'debug' 'Using default curl output';
    curl_progress="";
    ;;
  '0')
    log 'debug' 'Running curl silently with "-s"';
    curl_progress="-s";
    ;;
  *)
    log 'error' 'TGENV_CURL_OUTPUT specified, but not with a supported value ([0,1,2])';
    ;;
esac;

mkdir -p "${dst_path}" || log 'error' "Failed to make directory ${dst_path}";
log 'info' "Downloading release tarball from ${version_url}/${tarball_name}";
# curlw ${curl_progress} -f -o "${dst_path}/terragrunt" "${version_url}/${tarball_name}" || log 'error' 'Tarball download failed';
curlw ${curl_progress} --location-trusted -f -o "${dst_path}/terragrunt" "${version_url}/${tarball_name}" || log 'error' 'Tarball download failed';
chmod +x "${dst_path}/terragrunt"

# log 'info' "Downloading SHA hash file from ${version_url}/${shasums_name}";
# curlw -s -f -o "${download_tmp}/${shasums_name}" "${version_url}/${shasums_name}" || log 'error' 'SHA256 hashes download failed';

# download_signature() {
#   log 'info' "Downloading SHA hash signature file from ${version_url}/${shasums_name}.sig";
#   curlw -s -f \
#     -o "${download_tmp}/${shasums_name}.sig" \
#     "${version_url}/${shasums_name}.sig" \
#     && log 'debug' "SHA256SUMS signature file downloaded successfully to ${download_tmp}/${shasums_name}.sig" \
#     || log 'error' 'SHA256SUMS signature download failed';
# };

# # Verify signature if verification mechanism (keybase, gpg, etc) is present
# if [[ -n "${keybase_bin}" && -x "${keybase_bin}" ]]; then
#   grep -Eq '^Logged in:[[:space:]]*yes' <("${keybase_bin}" status);
#   keybase_logged_in="${?}";
#   grep -Fq hashicorp <("${keybase_bin}" list-following);
#   keybase_following_hc="${?}";

#   if [[ "${keybase_logged_in}" -ne 0 || "${keybase_following_hc}" -ne 0 ]]; then
#     log 'warn' 'Unable to verify OpenPGP signature unless logged into keybase and following hashicorp';
#   else
#     download_signature;
#     "${keybase_bin}" pgp verify \
#       -S hashicorp \
#       -d "${download_tmp}/${shasums_name}.sig" \
#       -i "${download_tmp}/${shasums_name}" \
#       && log 'debug' 'SHA256SUMS signature matched' \
#       || log 'error' 'SHA256SUMS signature does not match!';
#   fi;

# elif [[ -f "${TGENV_ROOT}/use-gnupg" ]]; then
#   # GnuPG uses the user's keyring, and any web-of-trust or local signatures or
#   # anything else they have setup.  This is the crazy-powerful mode which is
#   # overly confusing to newcomers.  We don't support it without the user creating
#   # the file use-gnupg, optionally with directives in it.
#   gnupg_command="$(sed -E -n -e 's/^binary: *//p' <"${TGENV_ROOT}/use-gnupg")";
#   [[ -n "${gnupg_command}" ]] || gnupg_command=gpg;

#   download_signature;
#   # Deliberately unquoted command, in case caller has something fancier in "use-gnupg".
#   # Also, don't use batch mode.  If someone specifies GnuPG, let them deal with any prompting.
#   ${gnupg_command} \
#     --verify "${download_tmp}/${shasums_name}.sig" \
#     "${download_tmp}/${shasums_name}" \
#     || log 'error' 'PGP signature rejected by GnuPG';

# elif [[ -f "${TGENV_ROOT}/use-gpgv" ]]; then
#   # gpgv is a much simpler interface to verification, but does require that the
#   # key have been downloaded and marked trusted.
#   # We don't force the caller to trust the tgenv repo's copy of their key, they
#   # have to choose to make that trust decision.
#   gpgv_command="$(sed -E -n -e 's/^binary: *//p' <"${TGENV_ROOT}/use-gpgv")";
#   trust_tgenv="$(sed -E -n -e 's/^trust.?tgenv: *//p' <"${TGENV_ROOT}/use-gpgv")";
#   [[ -n "${gpgv_command}" ]] || gpgv_command=gpgv;

#   download_signature;
#   if [[ "${trust_tgenv}" == 'yes' ]]; then
#     ${gpgv_command} \
#       --keyring "${TGENV_ROOT}/share/hashicorp-keys.pgp" \
#       "${download_tmp}/${shasums_name}.sig" \
#       "${download_tmp}/${shasums_name}" \
#       || log 'error' 'PGP signature rejected';
#   else
#     ${gpgv_command} \
#       "${download_tmp}/${shasums_name}.sig" \
#       "${download_tmp}/${shasums_name}" \
#       || log 'error' 'PGP signature rejected';
#   fi;
# else
#   # Warning about this avoids an unwarranted sense of confidence in the SHA check
#   log 'warn' 'No keybase install found, skipping OpenPGP signature verification';
# fi;

# if [[ -n "${shasum_bin}" && -x "${shasum_bin}" ]]; then
#   (
#     cd "${download_tmp}";
#     "${shasum_bin}" \
#       -a 256 \
#       -s \
#       -c <(grep -F "${tarball_name}" "${shasums_name}") \
#       || log 'error' 'SHA256 hash does not match!';
#   );
# elif [[ -n "${sha256sum_bin}" && -x "${sha256sum_bin}" ]]; then
#   (
#     cd "${download_tmp}";
#     "${sha256sum_bin}" \
#       -c <(grep -F "${tarball_name}" "${shasums_name}") \
#       || log 'error' 'SHA256 hash does not match!';
#   );
# else
#   # Lack of shasum deserves a proper warning
#   log 'warn' 'No shasum tool available. Skipping SHA256 hash validation';
# fi;

# mkdir -p "${dst_path}" || log 'error' "Failed to make directory ${dst_path}";

# declare unzip_output;
# unzip_output="$(unzip -o "${download_tmp}/${tarball_name}" -d "${dst_path}")" || log 'error' 'Tarball unzip failed';
# while IFS= read -r unzip_line; do
#  log 'info' "${unzip_line}";
# done < <(printf '%s\n' "${unzip_output}");

log 'info' "Installation of terragrunt v${version} successful. To make this your default version, run 'tgenv use ${version}'";
